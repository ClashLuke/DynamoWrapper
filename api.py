import traceback

import jsonpickle

try:
    from websocket_constants import (MESSAGE_KEY_BODY, MESSAGE_KEY_CONTENT,
                                     MESSAGE_KEY_MESSAGE_TYPE, MESSAGE_KEY_PARAMETERS,
                                     MESSAGE_KEY_REQUEST_ID, MESSAGE_KEY_REQUEST_TYPE,
                                     MESSAGE_KEY_STATUS_CODE)
except:
    print("[WARNING] Unable to import message keys. Can't construct responses.")

try:
    from socket_message_sending import send_socket_message
except:
    print("[WARNING] Unable to send to websocket")


    def send_socket_message(*args, **kwargs):
        """
        Fallback function to print an error if send_socket_message does not work.
        :param args: Suppressed positional arguments
        :param kwargs: Suppressed keyword arguments
        :return: None
        """
        raise UserWarning("Could not send message to websocket. "
                          "See traceback from init.")

from .api_functions import process_call
from .api_types import ApiResponse, UserRequest


def _extract_web_socket(event):
    """
    General handler for AWS web-socket request. The function extracts the data from the
    event generated by AWS to call a global handling function. The extraction part
    is the only API-specific part.
    :param event: the event generated by AWS when the function is called.
    :return: UserRequest instance
    """
    request = UserRequest()
    request.username = event['requestContext']['authorizer']['username']
    request.connection_id = event['requestContext']['connectionId']
    body = jsonpickle.loads(event['body'])
    request.request_type = body.get('request')
    request.parameters = body.get('data', {})
    request.request_id = event['requestContext']['requestId']
    return request


def _send_web_socket(request: UserRequest, response: ApiResponse):
    message = {MESSAGE_KEY_CONTENT: response.content,
               MESSAGE_KEY_STATUS_CODE: response.status_code,
               MESSAGE_KEY_REQUEST_TYPE: response.request_type,
               MESSAGE_KEY_PARAMETERS: response.request_parameters,
               MESSAGE_KEY_REQUEST_ID: response.request_id,
               MESSAGE_KEY_MESSAGE_TYPE: response.message_type
               }
    send_socket_message(connection=request.connection_id, message=message)
    return {MESSAGE_KEY_STATUS_CODE: 200, MESSAGE_KEY_BODY: 'success'}


def _extract_rest(event, request):
    pass


def _extract_qraph_ql(event, request):
    pass


def aws_wrapper(extractor, sender=None):
    """
    Wraps a given target function with an exception handling mechanism and other basic
    utilities. It curries the function, so that, when using it, one does not need to
    call the wrapper over and over again.
    :param extractor: The function extracting all the data into an event class
    :param sender: The function forwarding a message object to the clients
    :return: A curried ("wrapped") function, unable to raise exceptions.
    """

    def _wrapped_function(event):
        print(event)
        try:
            request = extractor(event)
        except Exception as exc:
            traceback.print_exc()
            return {MESSAGE_KEY_STATUS_CODE: 500,
                    MESSAGE_KEY_BODY: {
                            MESSAGE_KEY_CONTENT: f'Exception of type {type(exc)} '
                                                 f'containing {exc} as data occurred.'
                            }
                    }
        try:
            response = process_call(request)
        except Exception as exc:
            traceback.print_exc()
            response = ApiResponse(request)
            response.content = None
            response.status_code = 500

        if sender is not None:
            try:
                message = sender(request, response)
            except Exception as exc:
                traceback.print_exc()
            else:
                return message

    return _wrapped_function


web_socket = aws_wrapper(_extract_web_socket, _send_web_socket)
rest = aws_wrapper(_extract_rest)
graph_ql = aws_wrapper(_extract_qraph_ql)
